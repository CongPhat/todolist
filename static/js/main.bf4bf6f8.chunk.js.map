{"version":3,"sources":["component/newtask.js","component/edit.js","component/taskitem.js","App.js","serviceWorker.js","index.js"],"names":["Newtask","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","InputTask","event","target","name","value","setState","defineProperty","clickNew","preventDefault","props","state","nameTask","complete","react_default","a","createElement","className","type","onChange","onClick","Component","Edit","onChangeName","getName","placeholder","document","getElementById","requiceName","id","setAttribute","item","Taskitem","onChangeStatus","getStatus","Name","Id","removeTask","getTask","App","task","Math","random","obj","toFixed","concat","toConsumableArray","setTimeout","localStorage","setItem","JSON","stringify","changeStatus","status","forEach","changeName","changeTaskName","idTempo","receiveName","console","log","index","splice","parse","getItem","_this2","component_newtask","component_edit","map","component_taskitem","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf4bf6f8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../css/newtask.css'\r\n\r\nclass Newtask extends Component \r\n{\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      nameTask: '',\r\n      complete: false\r\n    }\r\n  }\r\n\r\n  InputTask = (event) =>{\r\n    const target = event.target;\r\n    const name = target.name;\r\n    const value = target.value;\r\n    this.setState({[name]: value});\r\n    \r\n  };\r\n\r\n  clickNew = (event) =>{\r\n    event.preventDefault();\r\n    this.props.Newtask(this.state.nameTask, this.state.complete);\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className='newtask'>\r\n        <div className='newtask__title'>\r\n          <h1>New todo</h1>\r\n        </div>\r\n        <div className='newtask__new'>\r\n            <div className='newtask__input'>\r\n              <input type=\"text\" name='nameTask' onChange={this.InputTask} className=\"form-control\" />\r\n            </div>\r\n            <div className='newtask__button'>\r\n              <button type=\"submit\" className=\"btn btn-default\" onClick={this.clickNew}>Add</button>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Newtask;\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport '../css/edit.css'\r\n\r\nclass Edit extends Component \r\n{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      onChangeName: this.props.item,\r\n    }\r\n  };\r\n\r\n  onChangeName = (event) =>{\r\n    this.setState({onChangeName: event.target.value});\r\n  };\r\n\r\n  getName = () =>{\r\n    var placeholder = document.getElementById('input');\r\n    this.props.requiceName(this.state.onChangeName, this.props.id);\r\n    this.setState({onChangeName: ''});\r\n    placeholder.setAttribute('placeholder', '');\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className='edit'>\r\n        <div className='edit__title'>\r\n          <h1>Edit: </h1>\r\n        </div>\r\n        <div className='edit__ib'>\r\n            <div className='edit__input'>\r\n              <input \r\n              type=\"text\"\r\n              name=\"onChangeName\"\r\n              id='input' \r\n              placeholder={this.props.item}\r\n              value={this.state.onChangeName}\r\n              onChange={this.onChangeName} \r\n              className=\"form-control\" />\r\n            </div>\r\n            <div className='edit__button'>\r\n              <button \r\n              type=\"submit\" \r\n              className=\"btn btn-danger\"\r\n              onClick={this.getName}\r\n              >Save</button>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Edit;\r\n","import React, { Component } from 'react';\r\nimport '../css/taskitem.css'\r\n\r\nclass Taskitem extends Component \r\n{\r\n  onChangeStatus = () =>{\r\n    this.props.getStatus(this.props.item.Name, this.props.item.complete);\r\n  };\r\n\r\n  onChangeName = () => {\r\n    this.props.getName(this.props.item.Name, this.props.item.Id);\r\n  }\r\n\r\n  removeTask = () => {\r\n    this.props.getTask(this.props.item.Id);\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className='taskitem'>\r\n        <div className='taskitem__name'>\r\n          <h1>{this.props.item.Name}</h1>\r\n        </div>\r\n        <div \r\n        className={this.props.item.complete === false ? 'taskitem__status --incomplete' : 'taskitem__status --complete'}\r\n        onClick={this.onChangeStatus}\r\n        >\r\n          <h2>{this.props.item.complete === false ? 'Incomplete' : 'Complete'}</h2>\r\n        </div>\r\n        <div className='newtask__button'>\r\n          <button type=\"submit\"><span \r\n          className=\"icon icon-pencil\"\r\n          onClick={this.onChangeName}\r\n          ></span></button>\r\n          <button type=\"submit\"><span \r\n          className=\"icon icon-bin\"\r\n          onClick={this.removeTask}\r\n          ></span></button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Taskitem;\r\n","import React, { Component } from 'react';\nimport Newtask from './component/newtask'\nimport Edit from './component/edit'\nimport Taskitem from './component/taskitem'\nimport './App.css';\n\nclass App extends Component \n{\n  constructor(){\n    super();\n    this.state = {\n      task: [],\n      changeTaskName: '',\n      idTempo: '',\n    }\n  };\n\n  componentWillMount(){\n    this.setState({task: JSON.parse(localStorage.getItem('Task'))});\n  };\n  \n\n  Newtask = (task, complete) =>{\n      var id = Math.random()*0x1000000;\n      id = id.toFixed(0);\n      let obj = {Id: id, Name: task, complete: complete};\n      this.setState({task: [...this.state.task, obj]});\n      setTimeout( () => {\n        localStorage.setItem('Task', JSON.stringify(this.state.task));\n      },2000);\n  };\n\n  changeStatus = (name, status) => {\n     let { task } = this.state;\n     task.forEach( (item) => {if(item.Name === name){item.complete = !status}});\n     this.setState({task: task});\n     setTimeout( () => {\n        localStorage.setItem('Task', JSON.stringify(this.state.task));\n      },1000);\n  };\n\n  changeName = (name, id) =>{\n    this.setState({changeTaskName: name, idTempo: id});\n  };\n\n  receiveName = (name, id) => {\n     let { task } = this.state;\n     task.forEach( (item) => {if(item.Id === id){item.Name = name}});\n     this.setState({task: task});\n     setTimeout( () => {\n        localStorage.setItem('Task', JSON.stringify(this.state.task));\n      },1000);\n  };\n\n  removeTask = (id) =>{\n    console.log(id);\n    let { task } = this.state;\n    task.forEach( (item, index) => {if(item.Id === id){task.splice(index, 1)}});\n    this.setState({task: task});\n     setTimeout( () => {\n        localStorage.setItem('Task', JSON.stringify(this.state.task));\n      },1000);\n  }\n\n  render(){\n    return (\n      <div className='App'>\n        <div className='container'>\n          <div className='row'>\n              <div className='App__title'>\n                  <h2>Todolist written in Reactjs</h2>\n              </div>\n              <div className='App__tasklist'>\n                <Newtask Newtask={this.Newtask}/>\n                <div className='App__item'>\n                    <Edit \n                    item={this.state.changeTaskName}\n                    id={this.state.idTempo}\n                    requiceName={this.receiveName}\n                    />\n                    {this.state.task.map( (item, index) => <Taskitem \n                      key={index} \n                      item={item}\n                      getStatus={this.changeStatus}\n                      getName={this.changeName}\n                      getTask={this.removeTask}\n                      />)}\n                </div>\n              </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}